#!/usr/bin/env Rscript

# find region methylation Value

# load library

suppressPackageStartupMessages(library("optparse", quietly=TRUE, verbose=FALSE, warn.conflicts=FALSE))
suppressPackageStartupMessages(library("methyutils", quietly=TRUE, verbose=FALSE, warn.conflicts=FALSE))
suppressPackageStartupMessages(library("reshape2", quietly=TRUE, verbose=FALSE, warn.conflicts=FALSE))
suppressPackageStartupMessages(library("data.table", quietly=TRUE, verbose=FALSE, warn.conflicts=FALSE))
suppressPackageStartupMessages(library("BSgenome.Mmusculus.UCSC.mm9", quietly=TRUE, verbose=FALSE, warn.conflicts=FALSE))

##Specify desired options in a list

option_list <- list(
    make_option(c("-p","--project-path"), help="project path(used to read the samples cg.mtbr file  )", default = "./"),
    make_option(c("-o","--output-path"), help=" use to save the result", default = "./"),
    make_option(c("-l","--genome-library"), help="Bioconductor BSgenome library name", default = "BSgenome.Mmusculus.UCSC.mm9"),
    make_option(c("-n","--genome-name"), help="genome library object name. ex: \"Mmusculus\", \"Hsapiens\", \"Scerevisiae\"", default = "Mmusculus"),
    make_option(c("-t","--genome-type"), help="genome type , example mm9, mm10, hg19, hg18, default is NULL", default = "")
)

# Get command line options

arguments <- parse_args(OptionParser(usage = "%prog [options] regionPath", option_list = option_list), positional_arguments = 1)
opt <- arguments$options

#kRegionPath <- opt$`region-path`
kGenomeLibrary <- opt$`genome-library`
kGenomeName <- opt$`genome-name`
kGenomeType <- opt$`genome-type`

kProjectPath <- opt$`project-path`
kOutputPath <- opt$`output-path`
kGenomeName <- opt$`genome-name`

kRegionPath <- arguments$args

# load the genome library

kGenomeTypeList <- list(
	mm9  = list(genome.library="BSgenome.Mmusculus.UCSC.mm9",genome.name="Mmusculus"),
	mm10 = list(genome.library="BSgenome.Mmusculus.UCSC.mm10",genome.name="Mmusculus"),
	hg18 = list(genome.library="BSgenome.Hsapiens.UCSC.hg18",genome.name="Hsapiens"),
	hg19 = list(genome.library="BSgenome.Hsapiens.UCSC.hg19",genome.name="Hsapiens"),
	hg38 = list(genome.library="BSgenome.Hsapiens.UCSC.hg38",genome.name="Hsapiens")
)
kGenome <- NULL

if ( kGenomeType %in% names(kGenomeTypeList) ){
	suppressPackageStartupMessages(library(kGenomeTypeList[[kGenomeType]][["genome.library"]], character.only = TRUE, quietly=TRUE, verbose=FALSE, warn.conflicts=FALSE))
	kGenome <- get(kGenomeTypeList[[kGenomeType]][["genome.name"]]) 
}else {
	suppressPackageStartupMessages(library(kGenomeLibrary, character.only = TRUE, quietly=TRUE, verbose=FALSE, warn.conflicts=FALSE))
	kGenome <- get(kGenomeName) 
}

if ( is.null(kGenome)){
	stop( "Load Biocondutor Genome Library ERROR " )
}


# Get region file names


if(!file.exists(kRegionPath)){
        stop("region file path \"", kRegionPath ,"\" does not exist.")
}

region.filenames <- list.files(kRegionPath)

# Get simple file names in order to read the cg.mtbr file

if(!file.exists(kProjectPath)){
        stop("project file path \"", kProjectPath ,"\" does not exist.")
}



sample.filenames <- list.files(kProjectPath)

# find mtbr Value in the region 
 for (sample.name in sample.filenames){
               
    # message(sample.name,"-",file.name," is running","\t",date())
    region.path <- file.path(kRegionPath)
    regions <- read.table(region.path, header = TRUE, sep = "\t")
    regions$id <- 1:nrow(regions)
	dt.regions <- as.data.table(regions)

    regions[,sample.name] <- 0

 	sample.mtbr.path <- paste(kSamplePath, "/", sample.name, "/mtbr_cg/", sep="")
 	message("[*] Processing ", sample.name, "\t", date())
 	chr.mtbr.files <- list.files(sample.mtbr.path)

 	for (chr.mtbr.file in chr.mtbr.files){

  		mtbr.file <- paste(sample.mtbr.path, chr.mtbr.file, sep = "")
 		load(mtbr.file)
	 	chr.name <- unlist(strsplit(basename(chr.mtbr.file), ".", fixed = TRUE))[1]

		##
		# if (kGenomeName == "mm9") {
		#     library("BSgenome.Mmusculus.UCSC.mm9")
	 	message(chr.name, "\tgetting median score ", "\t", date())

	 	dna.seq <- kGenome[[chr.name]]
		# }
		# else if (kGenomeName == "hg19") {
		#     library("BSgenome.Hsapiens.UCSC.hg19")
		#     dna.seq <- Hsapiens[[chr]]
		# }
		# else {
		#     stop("undefined genome. Only mm9 and hg19 are available now.")
		# }

		##
		rC <- integer(length(dna.seq))
		rC[cg.mtbr$posi] <- cg.mtbr$rC
		rT <- integer(length(dna.seq))
		rT[cg.mtbr$posi] <- cg.mtbr$rT
		cover <- rC + rT
		score <- rC / cover
		score[is.na(score)] <- 0
		#
		dt.chr.regions.expend <- dt.regions[dt.regions$chr == chr.name, ][,.(posi = start : end), by = id]

		dt.chr.regions.expend$score <- score[dt.chr.regions.expend$posi]
		regions[regions$chr == chr.name,][, sample.name] <- dt.chr.regions.expend[,.(score = median(score)), by = id]$score

    }
 
 
}

#save the file
savefile <- file.path(kOutputPath,"region.tissues.score.txt")
write.table(regions, savefile, row.names=F,col.names=T,quote=F) 

