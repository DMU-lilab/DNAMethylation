#!/usr/bin/env Rscript

# find region methylation Value

# load library

suppressPackageStartupMessages(library("optparse", quietly=TRUE, verbose=FALSE, warn.conflicts=FALSE))
suppressPackageStartupMessages(library("methyutils", quietly=TRUE, verbose=FALSE, warn.conflicts=FALSE))
suppressPackageStartupMessages(library("reshape2", quietly=TRUE, verbose=FALSE, warn.conflicts=FALSE))
suppressPackageStartupMessages(library("data.table", quietly=TRUE, verbose=FALSE, warn.conflicts=FALSE))

##Specify desired options in a list

option_list <- list(
    make_option(c("-m","--mtbr-path"), help="used to read the samples cg.mtbr file", default = "./"),
    make_option(c("-o","--output-path"), help=" use to save the result", default = "./")
)

# Get command line options

arguments <- parse_args(OptionParser(usage = "%prog [options] regionPath", option_list = option_list), positional_arguments = 1)
opt <- arguments$options

kMtbrPath <- opt$`mtbr-path`
kOutputPath <- opt$`output-path`

kRegionPath <- arguments$args

# Get region file names


if(!file.exists(kRegionPath)){
        stop("region file path \"", kRegionPath ,"\" does not exist.")
}


# Get simple file names in order to read the cg.mtbr file

if(!file.exists(kProjectPath)){
        stop("project file path \"", kProjectPath ,"\" does not exist.")
}


region.path <- file.path(kRegionPath)
regions <- read.table(region.path, header = TRUE, sep = "\t")
regions$id <- 1:nrow(regions)
dt.regions <- as.data.table(regions)

sample.filenames <- list.files(kProjectPath)

# find mtbr Value in the region 
 for (sample.name in sample.filenames){
               
    sample.name.score <- paste(sample.name, "_score", sep = "")
    sample.name.methy <- paste(sample.name, "_methy", sep = "")
    sample.name.umethy <- paste(sample.name, "_umethy", sep = "")
    sample.name.cgnum <- paste(sample.name, "_cgnum", sep = "")


    regions[,sample.name.score] <- 0
    regions[,sample.name.methy] <- 0
    regions[,sample.name.umethy] <- 0
    regions[,sample.name.cgnum] <- 0

 	sample.mtbr.path <- paste(kProjectPath, "/", sample.name, "/mtbr_cg/", sep="")
 	message("[*] Processing ", sample.name, "\t", date())
 	chr.mtbr.files <- list.files(sample.mtbr.path)

 	for (chr.mtbr.file in chr.mtbr.files){

  		mtbr.file <- paste(sample.mtbr.path, chr.mtbr.file, sep = "")
 		load(mtbr.file)
	 	chr.name <- unlist(strsplit(basename(chr.mtbr.file), ".", fixed = TRUE))[1]

	 	message(chr.name, "\tgetting median score ", "\t", date())
		##
		cg.mtbr$rC <- cg.mtbr$rC_n + cg.mtbr$rC_p
		cg.mtbr$rT <- cg.mtbr$rT_n + cg.mtbr$rT_p
		cg.mtbr$score <- with(cg.mtbr, rC / (rC + rT))
		
		#

		dt.chr.regions.expend <- dt.regions[dt.regions$chr == chr.name, ][,.(posi = start : end), by = id]
		dt.chr.regions.expend.merge <- merge(dt.chr.regions.expend, cg.mtbr, all.x = TRUE, by = "posi", sort = FALSE)
		dt.chr.regions.expend.merge$Methy <- 0
		dt.chr.regions.expend.merge$Methy[dt.chr.regions.expend.merge$score >= 0.8] <- 1
		dt.chr.regions.expend.merge$Methy[dt.chr.regions.expend.merge$score <= 0.2] <- 2
		
		dt.chr.value <- data.table(dt.chr.regions.expend.merge)[,.(score = median(score, na.rm = TRUE), methy = sum(Methy == 1), umethy = sum(Methy == 2), cgnum =  sum(!is.na(score))), by = id] 

		dt.chr.value.order <- dt.chr.value[order(dt.chr.value$id),]
		regions[regions$chr == chr.name,][, sample.name.score] <- dt.chr.value.order$score
		regions[regions$chr == chr.name,][, sample.name.methy] <- dt.chr.value.order$methy
		regions[regions$chr == chr.name,][, sample.name.umethy] <- dt.chr.value.order$umethy
		regions[regions$chr == chr.name,][, sample.name.cgnum] <- dt.chr.value.order$cgnum


    }
 
 
}

#save the file
savefile <- file.path(kOutputPath,"region.tissues.score.txt")
write.table(regions, savefile, row.names=F,col.names=T,quote=F) 

